// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PKCardsQuickType;
//
//    var pokeCardsModel = PokeCardsModel.FromJson(jsonString);

namespace PKCardsQuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PokeCardsModel
    {
        [JsonProperty("cards")]
        public List<Card> Cards { get; set; }
    }

    public partial class Card
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nationalPokedexNumber", NullValueHandling = NullValueHandling.Ignore)]
        public long? NationalPokedexNumber { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("imageUrlHiRes")]
        public Uri ImageUrlHiRes { get; set; }

        [JsonProperty("types", NullValueHandling = NullValueHandling.Ignore)]
        public List<RetreatCost> Types { get; set; }

        [JsonProperty("supertype")]
        public Supertype Supertype { get; set; }

        [JsonProperty("subtype")]
        public Subtype Subtype { get; set; }

        [JsonProperty("hp", NullValueHandling = NullValueHandling.Ignore)]
        public Hp? Hp { get; set; }

        [JsonProperty("retreatCost", NullValueHandling = NullValueHandling.Ignore)]
        public List<RetreatCost> RetreatCost { get; set; }

        [JsonProperty("convertedRetreatCost", NullValueHandling = NullValueHandling.Ignore)]
        public long? ConvertedRetreatCost { get; set; }

        [JsonProperty("number")]
        public string Number { get; set; }

        [JsonProperty("artist", NullValueHandling = NullValueHandling.Ignore)]
        public string Artist { get; set; }

        [JsonProperty("rarity")]
        public Rarity Rarity { get; set; }

        [JsonProperty("series")]
        public Series Series { get; set; }

        [JsonProperty("set")]
        public string Set { get; set; }

        [JsonProperty("setCode")]
        public string SetCode { get; set; }

        [JsonProperty("attacks", NullValueHandling = NullValueHandling.Ignore)]
        public List<Attack> Attacks { get; set; }

        [JsonProperty("resistances", NullValueHandling = NullValueHandling.Ignore)]
        public List<Resistance> Resistances { get; set; }

        [JsonProperty("weaknesses", NullValueHandling = NullValueHandling.Ignore)]
        public List<Resistance> Weaknesses { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Text { get; set; }

        [JsonProperty("evolvesFrom", NullValueHandling = NullValueHandling.Ignore)]
        public string EvolvesFrom { get; set; }

        [JsonProperty("ability", NullValueHandling = NullValueHandling.Ignore)]
        public Ability Ability { get; set; }
    }

    public partial class Ability
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class Attack
    {
        [JsonProperty("cost")]
        public List<RetreatCost> Cost { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("damage")]
        public string Damage { get; set; }

        [JsonProperty("convertedEnergyCost")]
        public long ConvertedEnergyCost { get; set; }
    }

    public partial class Resistance
    {
        [JsonProperty("type")]
        public RetreatCost Type { get; set; }

        [JsonProperty("value")]
        public ValueUnion Value { get; set; }
    }

    public enum TypeEnum { Ability, PokéBody, PokéPower };

    public enum RetreatCost { Colorless, Darkness, Fairy, Fighting, Fire, Free, Grass, Lightning, Metal, Psychic, Water };

    public enum Rarity { Common, Empty, Rare, RareHolo, RareHoloEx, RareUltra, Uncommon };

    public enum ValueEnum { The10, The2, The20, The30 };

    public enum Series { Base, BlackWhite, DiamondPearl, Ex, Gym, HeartGoldSoulSilver, Pop, SunMoon, Xy };

    public enum Subtype { Basic, Empty, Ex, Item, Special, Stadium, Stage1, Stage2, Supporter };

    public enum Supertype { Energy, Pokémon, Trainer };

    public partial struct Hp
    {
        public long? Integer;
        public string String;

        public static implicit operator Hp(long Integer) => new Hp { Integer = Integer };
        public static implicit operator Hp(string String) => new Hp { String = String };
    }

    public partial struct ValueUnion
    {
        public ValueEnum? Enum;
        public long? Integer;

        public static implicit operator ValueUnion(ValueEnum Enum) => new ValueUnion { Enum = Enum };
        public static implicit operator ValueUnion(long Integer) => new ValueUnion { Integer = Integer };
    }

    public partial class PokeCardsModel
    {
        public static PokeCardsModel FromJson(string json) => JsonConvert.DeserializeObject<PokeCardsModel>(json, PKCardsQuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PokeCardsModel self) => JsonConvert.SerializeObject(self, PKCardsQuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                RetreatCostConverter.Singleton,
                HpConverter.Singleton,
                RarityConverter.Singleton,
                ValueUnionConverter.Singleton,
                ValueEnumConverter.Singleton,
                SeriesConverter.Singleton,
                SubtypeConverter.Singleton,
                SupertypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ability":
                    return TypeEnum.Ability;
                case "Poké-Body":
                    return TypeEnum.PokéBody;
                case "Poké-Power":
                    return TypeEnum.PokéPower;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Ability:
                    serializer.Serialize(writer, "Ability");
                    return;
                case TypeEnum.PokéBody:
                    serializer.Serialize(writer, "Poké-Body");
                    return;
                case TypeEnum.PokéPower:
                    serializer.Serialize(writer, "Poké-Power");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class RetreatCostConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RetreatCost) || t == typeof(RetreatCost?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Colorless":
                    return RetreatCost.Colorless;
                case "Darkness":
                    return RetreatCost.Darkness;
                case "Fairy":
                    return RetreatCost.Fairy;
                case "Fighting":
                    return RetreatCost.Fighting;
                case "Fire":
                    return RetreatCost.Fire;
                case "Free":
                    return RetreatCost.Free;
                case "Grass":
                    return RetreatCost.Grass;
                case "Lightning":
                    return RetreatCost.Lightning;
                case "Metal":
                    return RetreatCost.Metal;
                case "Psychic":
                    return RetreatCost.Psychic;
                case "Water":
                    return RetreatCost.Water;
            }
            throw new Exception("Cannot unmarshal type RetreatCost");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RetreatCost)untypedValue;
            switch (value)
            {
                case RetreatCost.Colorless:
                    serializer.Serialize(writer, "Colorless");
                    return;
                case RetreatCost.Darkness:
                    serializer.Serialize(writer, "Darkness");
                    return;
                case RetreatCost.Fairy:
                    serializer.Serialize(writer, "Fairy");
                    return;
                case RetreatCost.Fighting:
                    serializer.Serialize(writer, "Fighting");
                    return;
                case RetreatCost.Fire:
                    serializer.Serialize(writer, "Fire");
                    return;
                case RetreatCost.Free:
                    serializer.Serialize(writer, "Free");
                    return;
                case RetreatCost.Grass:
                    serializer.Serialize(writer, "Grass");
                    return;
                case RetreatCost.Lightning:
                    serializer.Serialize(writer, "Lightning");
                    return;
                case RetreatCost.Metal:
                    serializer.Serialize(writer, "Metal");
                    return;
                case RetreatCost.Psychic:
                    serializer.Serialize(writer, "Psychic");
                    return;
                case RetreatCost.Water:
                    serializer.Serialize(writer, "Water");
                    return;
            }
            throw new Exception("Cannot marshal type RetreatCost");
        }

        public static readonly RetreatCostConverter Singleton = new RetreatCostConverter();
    }

    internal class HpConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Hp) || t == typeof(Hp?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Hp { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Hp { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Hp");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Hp)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Hp");
        }

        public static readonly HpConverter Singleton = new HpConverter();
    }

    internal class RarityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rarity) || t == typeof(Rarity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Rarity.Empty;
                case "Common":
                    return Rarity.Common;
                case "Rare":
                    return Rarity.Rare;
                case "Rare Holo":
                    return Rarity.RareHolo;
                case "Rare Holo EX":
                    return Rarity.RareHoloEx;
                case "Rare Ultra":
                    return Rarity.RareUltra;
                case "Uncommon":
                    return Rarity.Uncommon;
            }
            throw new Exception("Cannot unmarshal type Rarity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rarity)untypedValue;
            switch (value)
            {
                case Rarity.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Rarity.Common:
                    serializer.Serialize(writer, "Common");
                    return;
                case Rarity.Rare:
                    serializer.Serialize(writer, "Rare");
                    return;
                case Rarity.RareHolo:
                    serializer.Serialize(writer, "Rare Holo");
                    return;
                case Rarity.RareHoloEx:
                    serializer.Serialize(writer, "Rare Holo EX");
                    return;
                case Rarity.RareUltra:
                    serializer.Serialize(writer, "Rare Ultra");
                    return;
                case Rarity.Uncommon:
                    serializer.Serialize(writer, "Uncommon");
                    return;
            }
            throw new Exception("Cannot marshal type Rarity");
        }

        public static readonly RarityConverter Singleton = new RarityConverter();
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "+10":
                            return new ValueUnion { Enum = ValueEnum.The10 };
                        case "+20":
                            return new ValueUnion { Enum = ValueEnum.The20 };
                        case "+30":
                            return new ValueUnion { Enum = ValueEnum.The30 };
                        case "×2":
                            return new ValueUnion { Enum = ValueEnum.The2 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ValueUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ValueEnum.The10:
                        serializer.Serialize(writer, "+10");
                        return;
                    case ValueEnum.The20:
                        serializer.Serialize(writer, "+20");
                        return;
                    case ValueEnum.The30:
                        serializer.Serialize(writer, "+30");
                        return;
                    case ValueEnum.The2:
                        serializer.Serialize(writer, "×2");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }

    internal class ValueEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueEnum) || t == typeof(ValueEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "+10":
                    return ValueEnum.The10;
                case "+20":
                    return ValueEnum.The20;
                case "+30":
                    return ValueEnum.The30;
                case "×2":
                    return ValueEnum.The2;
            }
            throw new Exception("Cannot unmarshal type ValueEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ValueEnum)untypedValue;
            switch (value)
            {
                case ValueEnum.The10:
                    serializer.Serialize(writer, "+10");
                    return;
                case ValueEnum.The20:
                    serializer.Serialize(writer, "+20");
                    return;
                case ValueEnum.The30:
                    serializer.Serialize(writer, "+30");
                    return;
                case ValueEnum.The2:
                    serializer.Serialize(writer, "×2");
                    return;
            }
            throw new Exception("Cannot marshal type ValueEnum");
        }

        public static readonly ValueEnumConverter Singleton = new ValueEnumConverter();
    }

    internal class SeriesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Series) || t == typeof(Series?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Base":
                    return Series.Base;
                case "Black & White":
                    return Series.BlackWhite;
                case "Diamond & Pearl":
                    return Series.DiamondPearl;
                case "EX":
                    return Series.Ex;
                case "Gym":
                    return Series.Gym;
                case "HeartGold & SoulSilver":
                    return Series.HeartGoldSoulSilver;
                case "POP":
                    return Series.Pop;
                case "Sun & Moon":
                    return Series.SunMoon;
                case "XY":
                    return Series.Xy;
            }
            throw new Exception("Cannot unmarshal type Series");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Series)untypedValue;
            switch (value)
            {
                case Series.Base:
                    serializer.Serialize(writer, "Base");
                    return;
                case Series.BlackWhite:
                    serializer.Serialize(writer, "Black & White");
                    return;
                case Series.DiamondPearl:
                    serializer.Serialize(writer, "Diamond & Pearl");
                    return;
                case Series.Ex:
                    serializer.Serialize(writer, "EX");
                    return;
                case Series.Gym:
                    serializer.Serialize(writer, "Gym");
                    return;
                case Series.HeartGoldSoulSilver:
                    serializer.Serialize(writer, "HeartGold & SoulSilver");
                    return;
                case Series.Pop:
                    serializer.Serialize(writer, "POP");
                    return;
                case Series.SunMoon:
                    serializer.Serialize(writer, "Sun & Moon");
                    return;
                case Series.Xy:
                    serializer.Serialize(writer, "XY");
                    return;
            }
            throw new Exception("Cannot marshal type Series");
        }

        public static readonly SeriesConverter Singleton = new SeriesConverter();
    }

    internal class SubtypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Subtype) || t == typeof(Subtype?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Subtype.Empty;
                case "Basic":
                    return Subtype.Basic;
                case "EX":
                    return Subtype.Ex;
                case "Item":
                    return Subtype.Item;
                case "Special":
                    return Subtype.Special;
                case "Stadium":
                    return Subtype.Stadium;
                case "Stage 1":
                    return Subtype.Stage1;
                case "Stage 2":
                    return Subtype.Stage2;
                case "Supporter":
                    return Subtype.Supporter;
            }
            throw new Exception("Cannot unmarshal type Subtype");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Subtype)untypedValue;
            switch (value)
            {
                case Subtype.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Subtype.Basic:
                    serializer.Serialize(writer, "Basic");
                    return;
                case Subtype.Ex:
                    serializer.Serialize(writer, "EX");
                    return;
                case Subtype.Item:
                    serializer.Serialize(writer, "Item");
                    return;
                case Subtype.Special:
                    serializer.Serialize(writer, "Special");
                    return;
                case Subtype.Stadium:
                    serializer.Serialize(writer, "Stadium");
                    return;
                case Subtype.Stage1:
                    serializer.Serialize(writer, "Stage 1");
                    return;
                case Subtype.Stage2:
                    serializer.Serialize(writer, "Stage 2");
                    return;
                case Subtype.Supporter:
                    serializer.Serialize(writer, "Supporter");
                    return;
            }
            throw new Exception("Cannot marshal type Subtype");
        }

        public static readonly SubtypeConverter Singleton = new SubtypeConverter();
    }

    internal class SupertypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Supertype) || t == typeof(Supertype?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Energy":
                    return Supertype.Energy;
                case "Pokémon":
                    return Supertype.Pokémon;
                case "Trainer":
                    return Supertype.Trainer;
            }
            throw new Exception("Cannot unmarshal type Supertype");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Supertype)untypedValue;
            switch (value)
            {
                case Supertype.Energy:
                    serializer.Serialize(writer, "Energy");
                    return;
                case Supertype.Pokémon:
                    serializer.Serialize(writer, "Pokémon");
                    return;
                case Supertype.Trainer:
                    serializer.Serialize(writer, "Trainer");
                    return;
            }
            throw new Exception("Cannot marshal type Supertype");
        }

        public static readonly SupertypeConverter Singleton = new SupertypeConverter();
    }
}
