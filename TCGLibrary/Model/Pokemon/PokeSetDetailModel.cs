// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PKSDQuickType;
//
//    var setDetailModel = SetDetailModel.FromJson(jsonString);

namespace PKSDQuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PokeSetDetailModel
    {
        [JsonProperty("set")]
        public Set Set { get; set; }
    }

    public partial class Set
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("ptcgoCode")]
        public string PtcgoCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("series")]
        public string Series { get; set; }

        [JsonProperty("totalCards")]
        public long TotalCards { get; set; }

        [JsonProperty("standardLegal")]
        public bool StandardLegal { get; set; }

        [JsonProperty("expandedLegal")]
        public bool ExpandedLegal { get; set; }

        [JsonProperty("releaseDate")]
        public string ReleaseDate { get; set; }

        [JsonProperty("symbolUrl")]
        public Uri SymbolUrl { get; set; }

        [JsonProperty("logoUrl")]
        public Uri LogoUrl { get; set; }

        [JsonProperty("updatedAt")]
        public string UpdatedAt { get; set; }
    }

    public partial class PokeSetDetailModel
    {
        public static PokeSetDetailModel FromJson(string json) => JsonConvert.DeserializeObject<PokeSetDetailModel>(json, PKSDQuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PokeSetDetailModel self) => JsonConvert.SerializeObject(self, PKSDQuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
