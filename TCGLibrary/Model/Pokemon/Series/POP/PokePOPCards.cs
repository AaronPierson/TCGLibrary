// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using POPCQuickType;
//
//    var pokePopCards = PokePopCards.FromJson(jsonString);

namespace POPCQuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PokePopCards
    {
        [JsonProperty("cards")]
        public List<Card> Cards { get; set; }
    }

    public partial class Card
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nationalPokedexNumber")]
        public long NationalPokedexNumber { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("imageUrlHiRes")]
        public Uri ImageUrlHiRes { get; set; }

        [JsonProperty("types")]
        public List<RetreatCost> Types { get; set; }

        [JsonProperty("supertype")]
        public Supertype Supertype { get; set; }

        [JsonProperty("subtype")]
        public Subtype Subtype { get; set; }

        [JsonProperty("hp")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Hp { get; set; }

        [JsonProperty("retreatCost", NullValueHandling = NullValueHandling.Ignore)]
        public List<RetreatCost> RetreatCost { get; set; }

        [JsonProperty("convertedRetreatCost")]
        public long ConvertedRetreatCost { get; set; }

        [JsonProperty("number")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Number { get; set; }

        [JsonProperty("artist")]
        public string Artist { get; set; }

        [JsonProperty("rarity")]
        public Rarity Rarity { get; set; }

        [JsonProperty("series")]
        public Series Series { get; set; }

        [JsonProperty("set")]
        public Set Set { get; set; }

        [JsonProperty("setCode")]
        public SetCode SetCode { get; set; }

        [JsonProperty("attacks")]
        public List<Attack> Attacks { get; set; }

        [JsonProperty("resistances", NullValueHandling = NullValueHandling.Ignore)]
        public List<Resistance> Resistances { get; set; }

        [JsonProperty("weaknesses")]
        public List<Resistance> Weaknesses { get; set; }

        [JsonProperty("evolvesFrom", NullValueHandling = NullValueHandling.Ignore)]
        public string EvolvesFrom { get; set; }

        [JsonProperty("ability", NullValueHandling = NullValueHandling.Ignore)]
        public Ability Ability { get; set; }
    }

    public partial class Ability
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Attack
    {
        [JsonProperty("cost")]
        public List<RetreatCost> Cost { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("damage")]
        public string Damage { get; set; }

        [JsonProperty("convertedEnergyCost")]
        public long ConvertedEnergyCost { get; set; }
    }

    public partial class Resistance
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("value")]
        public ValueUnion Value { get; set; }
    }

    public enum RetreatCost { Colorless, Fire, Free, Grass, Lightning, Psychic, Water };

    public enum Rarity { Common, Rare, Uncommon };

    public enum ValueEnum { The10, The2 };

    public enum Series { Pop };

    public enum Set { PopSeries9 };

    public enum SetCode { Pop9 };

    public enum Subtype { Basic };

    public enum Supertype { Pokémon };

    public partial struct ValueUnion
    {
        public ValueEnum? Enum;
        public long? Integer;

        public static implicit operator ValueUnion(ValueEnum Enum) => new ValueUnion { Enum = Enum };
        public static implicit operator ValueUnion(long Integer) => new ValueUnion { Integer = Integer };
    }

    public partial class PokePopCards
    {
        public static PokePopCards FromJson(string json) => JsonConvert.DeserializeObject<PokePopCards>(json, POPCQuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PokePopCards self) => JsonConvert.SerializeObject(self, POPCQuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                RetreatCostConverter.Singleton,
                RarityConverter.Singleton,
                ValueUnionConverter.Singleton,
                ValueEnumConverter.Singleton,
                SeriesConverter.Singleton,
                SetConverter.Singleton,
                SetCodeConverter.Singleton,
                SubtypeConverter.Singleton,
                SupertypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class RetreatCostConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RetreatCost) || t == typeof(RetreatCost?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Colorless":
                    return RetreatCost.Colorless;
                case "Fire":
                    return RetreatCost.Fire;
                case "Free":
                    return RetreatCost.Free;
                case "Grass":
                    return RetreatCost.Grass;
                case "Lightning":
                    return RetreatCost.Lightning;
                case "Psychic":
                    return RetreatCost.Psychic;
                case "Water":
                    return RetreatCost.Water;
            }
            throw new Exception("Cannot unmarshal type RetreatCost");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RetreatCost)untypedValue;
            switch (value)
            {
                case RetreatCost.Colorless:
                    serializer.Serialize(writer, "Colorless");
                    return;
                case RetreatCost.Fire:
                    serializer.Serialize(writer, "Fire");
                    return;
                case RetreatCost.Free:
                    serializer.Serialize(writer, "Free");
                    return;
                case RetreatCost.Grass:
                    serializer.Serialize(writer, "Grass");
                    return;
                case RetreatCost.Lightning:
                    serializer.Serialize(writer, "Lightning");
                    return;
                case RetreatCost.Psychic:
                    serializer.Serialize(writer, "Psychic");
                    return;
                case RetreatCost.Water:
                    serializer.Serialize(writer, "Water");
                    return;
            }
            throw new Exception("Cannot marshal type RetreatCost");
        }

        public static readonly RetreatCostConverter Singleton = new RetreatCostConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class RarityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rarity) || t == typeof(Rarity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Common":
                    return Rarity.Common;
                case "Rare":
                    return Rarity.Rare;
                case "Uncommon":
                    return Rarity.Uncommon;
            }
            throw new Exception("Cannot unmarshal type Rarity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rarity)untypedValue;
            switch (value)
            {
                case Rarity.Common:
                    serializer.Serialize(writer, "Common");
                    return;
                case Rarity.Rare:
                    serializer.Serialize(writer, "Rare");
                    return;
                case Rarity.Uncommon:
                    serializer.Serialize(writer, "Uncommon");
                    return;
            }
            throw new Exception("Cannot marshal type Rarity");
        }

        public static readonly RarityConverter Singleton = new RarityConverter();
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "+10":
                            return new ValueUnion { Enum = ValueEnum.The10 };
                        case "×2":
                            return new ValueUnion { Enum = ValueEnum.The2 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ValueUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ValueEnum.The10:
                        serializer.Serialize(writer, "+10");
                        return;
                    case ValueEnum.The2:
                        serializer.Serialize(writer, "×2");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }

    internal class ValueEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueEnum) || t == typeof(ValueEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "+10":
                    return ValueEnum.The10;
                case "×2":
                    return ValueEnum.The2;
            }
            throw new Exception("Cannot unmarshal type ValueEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ValueEnum)untypedValue;
            switch (value)
            {
                case ValueEnum.The10:
                    serializer.Serialize(writer, "+10");
                    return;
                case ValueEnum.The2:
                    serializer.Serialize(writer, "×2");
                    return;
            }
            throw new Exception("Cannot marshal type ValueEnum");
        }

        public static readonly ValueEnumConverter Singleton = new ValueEnumConverter();
    }

    internal class SeriesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Series) || t == typeof(Series?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "POP")
            {
                return Series.Pop;
            }
            throw new Exception("Cannot unmarshal type Series");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Series)untypedValue;
            if (value == Series.Pop)
            {
                serializer.Serialize(writer, "POP");
                return;
            }
            throw new Exception("Cannot marshal type Series");
        }

        public static readonly SeriesConverter Singleton = new SeriesConverter();
    }

    internal class SetConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Set) || t == typeof(Set?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            //if (value == "POP Series 9")
            //{
                return Set.PopSeries9;
            //}
            throw new Exception("Cannot unmarshal type Set");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Set)untypedValue;
            if (value == Set.PopSeries9)
            {
                serializer.Serialize(writer, "POP Series 9");
                return;
            }
            throw new Exception("Cannot marshal type Set");
        }

        public static readonly SetConverter Singleton = new SetConverter();
    }

    internal class SetCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SetCode) || t == typeof(SetCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            //if (value == "pop9")
            //{
                return SetCode.Pop9;
            //}
            //throw new Exception("Cannot unmarshal type SetCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SetCode)untypedValue;
            if (value == SetCode.Pop9)
            {
                serializer.Serialize(writer, "pop9");
                return;
            }
            throw new Exception("Cannot marshal type SetCode");
        }

        public static readonly SetCodeConverter Singleton = new SetCodeConverter();
    }

    internal class SubtypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Subtype) || t == typeof(Subtype?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Basic")
            {
                return Subtype.Basic;
            }
            throw new Exception("Cannot unmarshal type Subtype");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Subtype)untypedValue;
            if (value == Subtype.Basic)
            {
                serializer.Serialize(writer, "Basic");
                return;
            }
            throw new Exception("Cannot marshal type Subtype");
        }

        public static readonly SubtypeConverter Singleton = new SubtypeConverter();
    }

    internal class SupertypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Supertype) || t == typeof(Supertype?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Pokémon")
            {
                return Supertype.Pokémon;
            }
            throw new Exception("Cannot unmarshal type Supertype");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Supertype)untypedValue;
            if (value == Supertype.Pokémon)
            {
                serializer.Serialize(writer, "Pokémon");
                return;
            }
            throw new Exception("Cannot marshal type Supertype");
        }

        public static readonly SupertypeConverter Singleton = new SupertypeConverter();
    }
}
