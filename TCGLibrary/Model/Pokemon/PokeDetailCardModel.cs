// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PKCDQuickType;
//
//    var pokeDetailCardModel = PokeDetailCardModel.FromJson(jsonString);

namespace PKCDQuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PokeDetailCardModel
    {
        [JsonProperty("card")]
        public Card Card { get; set; }
    }

    public partial class Card
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nationalPokedexNumber")]
        public long NationalPokedexNumber { get; set; }

        [JsonProperty("imageUrl")]
        public Uri ImageUrl { get; set; }

        [JsonProperty("imageUrlHiRes")]
        public Uri ImageUrlHiRes { get; set; }

        [JsonProperty("types")]
        public List<string> Types { get; set; }

        [JsonProperty("supertype")]
        public string Supertype { get; set; }

        [JsonProperty("subtype")]
        public string Subtype { get; set; }

        [JsonProperty("hp")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Hp { get; set; }

        [JsonProperty("retreatCost")]
        public List<string> RetreatCost { get; set; }

        [JsonProperty("convertedRetreatCost")]
        public long ConvertedRetreatCost { get; set; }

        [JsonProperty("number")]
        public string Number { get; set; }

        [JsonProperty("artist")]
        public string Artist { get; set; }

        [JsonProperty("rarity")]
        public string Rarity { get; set; }

        [JsonProperty("series")]
        public string Series { get; set; }

        [JsonProperty("set")]
        public string Set { get; set; }

        [JsonProperty("setCode")]
        public string SetCode { get; set; }

        [JsonProperty("attacks")]
        public List<Attack> Attacks { get; set; }

        [JsonProperty("weaknesses")]
        public List<Weakness> Weaknesses { get; set; }
    }

    public partial class Attack
    {
        [JsonProperty("cost")]
        public List<string> Cost { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("damage")]
        public string Damage { get; set; }

        [JsonProperty("convertedEnergyCost")]
        public long ConvertedEnergyCost { get; set; }
    }

    public partial class Weakness
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class PokeDetailCardModel
    {
        public static PokeDetailCardModel FromJson(string json) => JsonConvert.DeserializeObject<PokeDetailCardModel>(json, PKCDQuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PokeDetailCardModel self) => JsonConvert.SerializeObject(self, PKCDQuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
